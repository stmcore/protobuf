// Code generated by protoc-gen-go. DO NOT EDIT.
// source: info.proto

package information

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Param struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Param) Reset()         { *m = Param{} }
func (m *Param) String() string { return proto.CompactTextString(m) }
func (*Param) ProtoMessage()    {}
func (*Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{1}
}

func (m *Param) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Param.Unmarshal(m, b)
}
func (m *Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Param.Marshal(b, m, deterministic)
}
func (m *Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Param.Merge(m, src)
}
func (m *Param) XXX_Size() int {
	return xxx_messageInfo_Param.Size(m)
}
func (m *Param) XXX_DiscardUnknown() {
	xxx_messageInfo_Param.DiscardUnknown(m)
}

var xxx_messageInfo_Param proto.InternalMessageInfo

func (m *Param) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ChannelInfo struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BmsCode              string   `protobuf:"bytes,3,opt,name=bms_code,json=bmsCode,proto3" json:"bms_code,omitempty"`
	DefinitionCode       string   `protobuf:"bytes,4,opt,name=definition_code,json=definitionCode,proto3" json:"definition_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{2}
}

func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInfo.Unmarshal(m, b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
}
func (m *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(m, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelInfo.Size(m)
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

func (m *ChannelInfo) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ChannelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelInfo) GetBmsCode() string {
	if m != nil {
		return m.BmsCode
	}
	return ""
}

func (m *ChannelInfo) GetDefinitionCode() string {
	if m != nil {
		return m.DefinitionCode
	}
	return ""
}

type BitRateInfo struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	VideoBitRate         int64    `protobuf:"varint,2,opt,name=video_bit_rate,json=videoBitRate,proto3" json:"video_bit_rate,omitempty"`
	AudioBitRate         int64    `protobuf:"varint,3,opt,name=audio_bit_rate,json=audioBitRate,proto3" json:"audio_bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitRateInfo) Reset()         { *m = BitRateInfo{} }
func (m *BitRateInfo) String() string { return proto.CompactTextString(m) }
func (*BitRateInfo) ProtoMessage()    {}
func (*BitRateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{3}
}

func (m *BitRateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitRateInfo.Unmarshal(m, b)
}
func (m *BitRateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitRateInfo.Marshal(b, m, deterministic)
}
func (m *BitRateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitRateInfo.Merge(m, src)
}
func (m *BitRateInfo) XXX_Size() int {
	return xxx_messageInfo_BitRateInfo.Size(m)
}
func (m *BitRateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BitRateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BitRateInfo proto.InternalMessageInfo

func (m *BitRateInfo) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *BitRateInfo) GetVideoBitRate() int64 {
	if m != nil {
		return m.VideoBitRate
	}
	return 0
}

func (m *BitRateInfo) GetAudioBitRate() int64 {
	if m != nil {
		return m.AudioBitRate
	}
	return 0
}

type ChannelDetail struct {
	Code                 string         `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BmsCode              string         `protobuf:"bytes,3,opt,name=bms_code,json=bmsCode,proto3" json:"bms_code,omitempty"`
	Lang                 []string       `protobuf:"bytes,4,rep,name=lang,proto3" json:"lang,omitempty"`
	DefinitionCode       string         `protobuf:"bytes,5,opt,name=definition_code,json=definitionCode,proto3" json:"definition_code,omitempty"`
	BitRate              []*BitRateInfo `protobuf:"bytes,6,rep,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	InstanceName         string         `protobuf:"bytes,7,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Drm                  string         `protobuf:"bytes,8,opt,name=drm,proto3" json:"drm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChannelDetail) Reset()         { *m = ChannelDetail{} }
func (m *ChannelDetail) String() string { return proto.CompactTextString(m) }
func (*ChannelDetail) ProtoMessage()    {}
func (*ChannelDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{4}
}

func (m *ChannelDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelDetail.Unmarshal(m, b)
}
func (m *ChannelDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelDetail.Marshal(b, m, deterministic)
}
func (m *ChannelDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelDetail.Merge(m, src)
}
func (m *ChannelDetail) XXX_Size() int {
	return xxx_messageInfo_ChannelDetail.Size(m)
}
func (m *ChannelDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelDetail proto.InternalMessageInfo

func (m *ChannelDetail) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ChannelDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelDetail) GetBmsCode() string {
	if m != nil {
		return m.BmsCode
	}
	return ""
}

func (m *ChannelDetail) GetLang() []string {
	if m != nil {
		return m.Lang
	}
	return nil
}

func (m *ChannelDetail) GetDefinitionCode() string {
	if m != nil {
		return m.DefinitionCode
	}
	return ""
}

func (m *ChannelDetail) GetBitRate() []*BitRateInfo {
	if m != nil {
		return m.BitRate
	}
	return nil
}

func (m *ChannelDetail) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *ChannelDetail) GetDrm() string {
	if m != nil {
		return m.Drm
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "information.Empty")
	proto.RegisterType((*Param)(nil), "information.Param")
	proto.RegisterType((*ChannelInfo)(nil), "information.ChannelInfo")
	proto.RegisterType((*BitRateInfo)(nil), "information.bitRateInfo")
	proto.RegisterType((*ChannelDetail)(nil), "information.ChannelDetail")
}

func init() { proto.RegisterFile("info.proto", fileDescriptor_f140d5b28dddb141) }

var fileDescriptor_f140d5b28dddb141 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0x29, 0x2d, 0x14, 0xa6, 0xc0, 0xff, 0x9f, 0x3d, 0x55, 0xbc, 0x90, 0x6a, 0x22, 0xa7,
	0x86, 0xc0, 0x4d, 0x12, 0x23, 0xa0, 0x26, 0x5e, 0x0c, 0xa9, 0xf1, 0xdc, 0x6c, 0xdb, 0xa5, 0x6c,
	0xd2, 0xdd, 0x92, 0xb2, 0x10, 0xf9, 0x86, 0x7e, 0x27, 0x2f, 0x66, 0xb7, 0x55, 0xc1, 0x14, 0x0e,
	0xc6, 0xdb, 0xf4, 0xf5, 0x37, 0x9d, 0x37, 0xaf, 0xbb, 0x00, 0x94, 0x2f, 0x52, 0x77, 0x95, 0xa5,
	0x22, 0x45, 0x96, 0xac, 0x33, 0x86, 0x05, 0x4d, 0xb9, 0x63, 0x42, 0xed, 0x9e, 0xad, 0xc4, 0xce,
	0x39, 0x87, 0xda, 0x1c, 0x67, 0x98, 0x21, 0x04, 0x46, 0x98, 0x46, 0xc4, 0xd6, 0x7a, 0x5a, 0xbf,
	0xe9, 0xa9, 0xda, 0xd9, 0x81, 0x35, 0x5b, 0x62, 0xce, 0x49, 0xf2, 0xc8, 0x17, 0x69, 0x19, 0x22,
	0x35, 0x8e, 0x19, 0xb1, 0xab, 0xb9, 0x26, 0x6b, 0x74, 0x06, 0x8d, 0x80, 0xad, 0x7d, 0xc5, 0xea,
	0x4a, 0x37, 0x03, 0xb6, 0x9e, 0x49, 0xfc, 0x0a, 0xfe, 0x45, 0x64, 0x41, 0x39, 0x95, 0x2e, 0x72,
	0xc2, 0x50, 0x44, 0xe7, 0x5b, 0x96, 0xa0, 0xc3, 0xc0, 0x0a, 0xa8, 0xf0, 0xb0, 0x20, 0x47, 0x47,
	0x5f, 0x42, 0x67, 0x4b, 0x23, 0x92, 0xfa, 0x01, 0x15, 0x7e, 0x86, 0x45, 0x6e, 0x42, 0xf7, 0x5a,
	0x4a, 0x9d, 0xe6, 0xdd, 0x92, 0xc2, 0x9b, 0x88, 0xee, 0x51, 0x7a, 0x4e, 0x29, 0xb5, 0xa0, 0x9c,
	0x77, 0x0d, 0xda, 0xc5, 0xaa, 0x77, 0x44, 0x60, 0x9a, 0xfc, 0xc5, 0xb2, 0x08, 0x8c, 0x04, 0xf3,
	0xd8, 0x36, 0x7a, 0xba, 0xc4, 0x65, 0x5d, 0x16, 0x40, 0xad, 0x2c, 0x00, 0x34, 0x82, 0xc6, 0x97,
	0xe3, 0x7a, 0x4f, 0xef, 0x5b, 0x43, 0xdb, 0xdd, 0xfb, 0x83, 0xee, 0x5e, 0x3a, 0x9e, 0x59, 0x3c,
	0xa0, 0x0b, 0x68, 0x53, 0xbe, 0x16, 0x98, 0x87, 0xc4, 0x57, 0x4e, 0x4d, 0xf5, 0xed, 0xd6, 0xa7,
	0xf8, 0x24, 0x1d, 0xff, 0x07, 0x3d, 0xca, 0x98, 0xdd, 0x50, 0xaf, 0x64, 0x39, 0x7c, 0xab, 0x42,
	0xa7, 0xd8, 0xfe, 0x99, 0x64, 0x5b, 0x1a, 0x12, 0x34, 0x06, 0x33, 0x26, 0x22, 0xcf, 0xfe, 0x60,
	0xae, 0x3a, 0x2d, 0xdd, 0xee, 0x81, 0x76, 0x90, 0x9c, 0x53, 0x41, 0x37, 0x00, 0x31, 0x11, 0x33,
	0x2c, 0xc2, 0xe5, 0xcb, 0xfc, 0x47, 0xbf, 0x3a, 0x76, 0x5d, 0xbb, 0xac, 0x5f, 0x4e, 0x73, 0x2a,
	0x03, 0x0d, 0x8d, 0xa1, 0x19, 0x13, 0x31, 0xdd, 0xe5, 0x29, 0x96, 0x8c, 0x3f, 0xd1, 0x8e, 0xae,
	0xa1, 0x1e, 0x13, 0x31, 0x49, 0x92, 0x5f, 0x0c, 0xbe, 0x55, 0xc6, 0x27, 0x49, 0xf2, 0xb0, 0x39,
	0xd2, 0x7f, 0x72, 0xf1, 0x81, 0x36, 0x6d, 0x82, 0x49, 0x5e, 0xdd, 0x38, 0x5b, 0x85, 0x41, 0x5d,
	0xdd, 0xbb, 0xd1, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x59, 0xd5, 0x41, 0x85, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelServiceClient interface {
	GetInfo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*ChannelDetail, error)
	GetCatchUP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChannelService_GetCatchUPClient, error)
	GetByCode(ctx context.Context, in *Param, opts ...grpc.CallOption) (*ChannelInfo, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChannelService_GetAllClient, error)
	GetAllFull(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChannelService_GetAllFullClient, error)
}

type channelServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelServiceClient(cc *grpc.ClientConn) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) GetInfo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*ChannelDetail, error) {
	out := new(ChannelDetail)
	err := c.cc.Invoke(ctx, "/information.ChannelService/getInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetCatchUP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChannelService_GetCatchUPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChannelService_serviceDesc.Streams[0], "/information.ChannelService/getCatchUP", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelServiceGetCatchUPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChannelService_GetCatchUPClient interface {
	Recv() (*ChannelInfo, error)
	grpc.ClientStream
}

type channelServiceGetCatchUPClient struct {
	grpc.ClientStream
}

func (x *channelServiceGetCatchUPClient) Recv() (*ChannelInfo, error) {
	m := new(ChannelInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *channelServiceClient) GetByCode(ctx context.Context, in *Param, opts ...grpc.CallOption) (*ChannelInfo, error) {
	out := new(ChannelInfo)
	err := c.cc.Invoke(ctx, "/information.ChannelService/getByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChannelService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChannelService_serviceDesc.Streams[1], "/information.ChannelService/getAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChannelService_GetAllClient interface {
	Recv() (*ChannelInfo, error)
	grpc.ClientStream
}

type channelServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *channelServiceGetAllClient) Recv() (*ChannelInfo, error) {
	m := new(ChannelInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *channelServiceClient) GetAllFull(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ChannelService_GetAllFullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChannelService_serviceDesc.Streams[2], "/information.ChannelService/getAllFull", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelServiceGetAllFullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChannelService_GetAllFullClient interface {
	Recv() (*ChannelDetail, error)
	grpc.ClientStream
}

type channelServiceGetAllFullClient struct {
	grpc.ClientStream
}

func (x *channelServiceGetAllFullClient) Recv() (*ChannelDetail, error) {
	m := new(ChannelDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChannelServiceServer is the server API for ChannelService service.
type ChannelServiceServer interface {
	GetInfo(context.Context, *Param) (*ChannelDetail, error)
	GetCatchUP(*Empty, ChannelService_GetCatchUPServer) error
	GetByCode(context.Context, *Param) (*ChannelInfo, error)
	GetAll(*Empty, ChannelService_GetAllServer) error
	GetAllFull(*Empty, ChannelService_GetAllFullServer) error
}

// UnimplementedChannelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChannelServiceServer struct {
}

func (*UnimplementedChannelServiceServer) GetInfo(ctx context.Context, req *Param) (*ChannelDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedChannelServiceServer) GetCatchUP(req *Empty, srv ChannelService_GetCatchUPServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCatchUP not implemented")
}
func (*UnimplementedChannelServiceServer) GetByCode(ctx context.Context, req *Param) (*ChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCode not implemented")
}
func (*UnimplementedChannelServiceServer) GetAll(req *Empty, srv ChannelService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedChannelServiceServer) GetAllFull(req *Empty, srv ChannelService_GetAllFullServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllFull not implemented")
}

func RegisterChannelServiceServer(s *grpc.Server, srv ChannelServiceServer) {
	s.RegisterService(&_ChannelService_serviceDesc, srv)
}

func _ChannelService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/information.ChannelService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetInfo(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetCatchUP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServiceServer).GetCatchUP(m, &channelServiceGetCatchUPServer{stream})
}

type ChannelService_GetCatchUPServer interface {
	Send(*ChannelInfo) error
	grpc.ServerStream
}

type channelServiceGetCatchUPServer struct {
	grpc.ServerStream
}

func (x *channelServiceGetCatchUPServer) Send(m *ChannelInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ChannelService_GetByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/information.ChannelService/GetByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetByCode(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServiceServer).GetAll(m, &channelServiceGetAllServer{stream})
}

type ChannelService_GetAllServer interface {
	Send(*ChannelInfo) error
	grpc.ServerStream
}

type channelServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *channelServiceGetAllServer) Send(m *ChannelInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ChannelService_GetAllFull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServiceServer).GetAllFull(m, &channelServiceGetAllFullServer{stream})
}

type ChannelService_GetAllFullServer interface {
	Send(*ChannelDetail) error
	grpc.ServerStream
}

type channelServiceGetAllFullServer struct {
	grpc.ServerStream
}

func (x *channelServiceGetAllFullServer) Send(m *ChannelDetail) error {
	return x.ServerStream.SendMsg(m)
}

var _ChannelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "information.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getInfo",
			Handler:    _ChannelService_GetInfo_Handler,
		},
		{
			MethodName: "getByCode",
			Handler:    _ChannelService_GetByCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getCatchUP",
			Handler:       _ChannelService_GetCatchUP_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAll",
			Handler:       _ChannelService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllFull",
			Handler:       _ChannelService_GetAllFull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "info.proto",
}
